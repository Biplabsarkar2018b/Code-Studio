#include <bits/stdc++.h> 

// int helper(int n,vector<int>&heights,vector<int>&dp){
//     if(n==0) return 0;
//     if(dp[n]!=-1) return dp[n];
//     int one = helper(n-1,heights,dp) + abs(heights[n]-heights[n-1]);
//     int two = INT_MAX;
//     if(n>1)
//         two = helper(n-2,heights,dp) + abs(heights[n]-heights[n-2]);
    
//     return dp[n] = min(one,two);
    
// }

int frogJump(int n, vector<int> &heights)
{
//     vector<int> dp(n,-1);
//     return helper(n-1,heights,dp);
//     vector<int> dp(n,-1);
//     dp[0] = 0;
//     for(int i=1;i<n;i++){
//         int fs = dp[i-1] + abs(heights[i]-heights[i-1]);
//         int ss = INT_MAX;
//         if(i>1) ss = dp[i-2] + abs(heights[i]-heights[i-2]);
//         dp[i] = min(fs,ss);
//     }
//     return dp[n-1];
    
    int prev2 = 0;
    int prev1 = 0;
    int curr;
    for(int i=1;i<n;i++){
        int fs = prev1 + abs(heights[i]-heights[i-1]);
        int ss = INT_MAX;
        if(i>1) ss = prev2 + abs(heights[i]-heights[i-2]);
        curr = min(fs,ss);
        prev2 = prev1;
        prev1 = curr;
    }
    return prev1;
}
